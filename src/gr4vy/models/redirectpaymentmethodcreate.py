"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from gr4vy import utils
from gr4vy.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from gr4vy.utils import validate_open_enum
from pydantic import model_serializer
from pydantic.functional_validators import PlainValidator
from typing_extensions import Annotated, NotRequired, TypedDict


class RedirectPaymentMethodCreateMethod(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""The method to use, this can be any of the methods that support redirect requests."""

    ABITAB = "abitab"
    AFFIRM = "affirm"
    AFTERPAY = "afterpay"
    ALIPAY = "alipay"
    ALIPAYHK = "alipayhk"
    ARCUSPAYNETWORK = "arcuspaynetwork"
    BACS = "bacs"
    BANCONTACT = "bancontact"
    BANKED = "banked"
    BCP = "bcp"
    BECS = "becs"
    BITPAY = "bitpay"
    BOLETO = "boleto"
    BOOST = "boost"
    CASHAPP = "cashapp"
    CLEARPAY = "clearpay"
    DANA = "dana"
    DCB = "dcb"
    DLOCAL = "dlocal"
    EBANX = "ebanx"
    EFECTY = "efecty"
    EPS = "eps"
    EVERYDAYPAY = "everydaypay"
    GCASH = "gcash"
    GEM = "gem"
    GEMDS = "gemds"
    GIROPAY = "giropay"
    GIVINGBLOCK = "givingblock"
    GOCARDLESS = "gocardless"
    GOPAY = "gopay"
    GRABPAY = "grabpay"
    IDEAL = "ideal"
    KAKAOPAY = "kakaopay"
    KCP = "kcp"
    KHIPU = "khipu"
    KLARNA = "klarna"
    LATITUDE = "latitude"
    LATITUDEDS = "latitudeds"
    LAYBUY = "laybuy"
    LINEPAY = "linepay"
    LINKAJA = "linkaja"
    MAYBANKQRPAY = "maybankqrpay"
    MERCADOPAGO = "mercadopago"
    MULTIBANCO = "multibanco"
    MULTIPAGO = "multipago"
    NETBANKING = "netbanking"
    NUPAY = "nupay"
    NEQUI = "nequi"
    ONEY_10X = "oney_10x"
    ONEY_12X = "oney_12x"
    ONEY_3X = "oney_3x"
    ONEY_4X = "oney_4x"
    ONEY_6X = "oney_6x"
    OVO = "ovo"
    OXXO = "oxxo"
    PAGOEFECTIVO = "pagoefectivo"
    PAYID = "payid"
    PAYMAYA = "paymaya"
    PAYPAL = "paypal"
    PAYPALPAYLATER = "paypalpaylater"
    PAYTO = "payto"
    PAYVALIDA = "payvalida"
    PICPAY = "picpay"
    PIX = "pix"
    PSE = "pse"
    RABBITLINEPAY = "rabbitlinepay"
    RAPIPAGO = "rapipago"
    RAZORPAY = "razorpay"
    REDPAGOS = "redpagos"
    SCALAPAY = "scalapay"
    SEPA = "sepa"
    SERVIPAG = "servipag"
    SHOPEEPAY = "shopeepay"
    SINGTELDASH = "singteldash"
    SMARTPAY = "smartpay"
    SOFORT = "sofort"
    SPEI = "spei"
    STITCH = "stitch"
    STRIPEDD = "stripedd"
    THAIQR = "thaiqr"
    TOUCHNGO = "touchngo"
    TRUEMONEY = "truemoney"
    TRUSTLY = "trustly"
    TRUSTLYEUROPE = "trustlyeurope"
    UPI = "upi"
    VENMO = "venmo"
    VIPPS = "vipps"
    WAAVE = "waave"
    WEBPAY = "webpay"
    WECHAT = "wechat"
    YAPE = "yape"
    ZIPPAY = "zippay"


class RedirectPaymentMethodCreateTypedDict(TypedDict):
    r"""Create a transaction for an APM/LPM that requires a redirect."""

    method: RedirectPaymentMethodCreateMethod
    r"""The method to use, this can be any of the methods that support redirect requests."""
    country: str
    r"""The 2-letter ISO code of the country to use this payment method for. This is used to select the payment service to use."""
    currency: str
    r"""The ISO-4217 currency code to use this payment method for. This is used to select the payment service to use."""
    redirect_url: str
    r"""The redirect URL to redirect a buyer to after they have authorized the payment method."""
    buyer_id: NotRequired[Nullable[str]]
    r"""The `id` of a stored buyer to use Use this instead of the `buyer_external_identifier`."""
    buyer_external_identifier: NotRequired[Nullable[str]]
    r"""The `external_identifier` of a stored buyer to use. Use this instead of the `buyer_id`."""
    external_identifier: NotRequired[Nullable[str]]
    r"""The merchant identifier for this payment method."""


class RedirectPaymentMethodCreate(BaseModel):
    r"""Create a transaction for an APM/LPM that requires a redirect."""

    method: Annotated[
        RedirectPaymentMethodCreateMethod, PlainValidator(validate_open_enum(False))
    ]
    r"""The method to use, this can be any of the methods that support redirect requests."""

    country: str
    r"""The 2-letter ISO code of the country to use this payment method for. This is used to select the payment service to use."""

    currency: str
    r"""The ISO-4217 currency code to use this payment method for. This is used to select the payment service to use."""

    redirect_url: str
    r"""The redirect URL to redirect a buyer to after they have authorized the payment method."""

    buyer_id: OptionalNullable[str] = UNSET
    r"""The `id` of a stored buyer to use Use this instead of the `buyer_external_identifier`."""

    buyer_external_identifier: OptionalNullable[str] = UNSET
    r"""The `external_identifier` of a stored buyer to use. Use this instead of the `buyer_id`."""

    external_identifier: OptionalNullable[str] = UNSET
    r"""The merchant identifier for this payment method."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "buyer_id",
            "buyer_external_identifier",
            "external_identifier",
        ]
        nullable_fields = [
            "buyer_id",
            "buyer_external_identifier",
            "external_identifier",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
