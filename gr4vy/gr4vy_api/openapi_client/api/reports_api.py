"""
    Gr4vy API

    Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.  # noqa: E501

    The version of the OpenAPI document: 1.1.0-beta
    Contact: code@gr4vy.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from gr4vy.gr4vy_api.openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from gr4vy.gr4vy_api.openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from gr4vy.gr4vy_api.openapi_client.model.error401_unauthorized import Error401Unauthorized
from gr4vy.gr4vy_api.openapi_client.model.error404_not_found import Error404NotFound
from gr4vy.gr4vy_api.openapi_client.model.error_generic import ErrorGeneric
from gr4vy.gr4vy_api.openapi_client.model.report import Report
from gr4vy.gr4vy_api.openapi_client.model.report_create import ReportCreate
from gr4vy.gr4vy_api.openapi_client.model.report_execution import ReportExecution
from gr4vy.gr4vy_api.openapi_client.model.report_execution_url import ReportExecutionUrl
from gr4vy.gr4vy_api.openapi_client.model.report_executions import ReportExecutions
from gr4vy.gr4vy_api.openapi_client.model.report_update import ReportUpdate
from gr4vy.gr4vy_api.openapi_client.model.reports import Reports


class ReportsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.add_report_endpoint = _Endpoint(
            settings={
                'response_type': (Report,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/reports',
                'operation_id': 'add_report',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'report_create',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'report_create':
                        (ReportCreate,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'report_create': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.generate_download_url_endpoint = _Endpoint(
            settings={
                'response_type': (ReportExecutionUrl,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/reports/{report_id}/executions/{report_execution_id}/url',
                'operation_id': 'generate_download_url',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'report_id',
                    'report_execution_id',
                ],
                'required': [
                    'report_id',
                    'report_execution_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'report_id':
                        (str,),
                    'report_execution_id':
                        (str,),
                },
                'attribute_map': {
                    'report_id': 'report_id',
                    'report_execution_id': 'report_execution_id',
                },
                'location_map': {
                    'report_id': 'path',
                    'report_execution_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_report_endpoint = _Endpoint(
            settings={
                'response_type': (Report,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/reports/{report_id}',
                'operation_id': 'get_report',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'report_id',
                ],
                'required': [
                    'report_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'report_id':
                        (str,),
                },
                'attribute_map': {
                    'report_id': 'report_id',
                },
                'location_map': {
                    'report_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_report_execution_endpoint = _Endpoint(
            settings={
                'response_type': (ReportExecution,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/report-executions/{report_execution_id}',
                'operation_id': 'get_report_execution',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'report_execution_id',
                ],
                'required': [
                    'report_execution_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'report_execution_id':
                        (str,),
                },
                'attribute_map': {
                    'report_execution_id': 'report_execution_id',
                },
                'location_map': {
                    'report_execution_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_all_report_executions_endpoint = _Endpoint(
            settings={
                'response_type': (ReportExecutions,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/report-executions',
                'operation_id': 'list_all_report_executions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cursor',
                    'limit',
                    'created_at_gte',
                    'created_at_lte',
                    'report_name',
                    'status',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'status',
                ],
                'validation': [
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 100,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('status',): {

                        "DISPATCHED": "dispatched",
                        "FAILED": "failed",
                        "PENDING": "pending",
                        "PROCESSING": "processing",
                        "SUCCEEDED": "succeeded"
                    },
                },
                'openapi_types': {
                    'cursor':
                        (str,),
                    'limit':
                        (int,),
                    'created_at_gte':
                        (datetime,),
                    'created_at_lte':
                        (datetime,),
                    'report_name':
                        (str,),
                    'status':
                        ([str],),
                },
                'attribute_map': {
                    'cursor': 'cursor',
                    'limit': 'limit',
                    'created_at_gte': 'created_at_gte',
                    'created_at_lte': 'created_at_lte',
                    'report_name': 'report_name',
                    'status': 'status',
                },
                'location_map': {
                    'cursor': 'query',
                    'limit': 'query',
                    'created_at_gte': 'query',
                    'created_at_lte': 'query',
                    'report_name': 'query',
                    'status': 'query',
                },
                'collection_format_map': {
                    'status': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_report_executions_endpoint = _Endpoint(
            settings={
                'response_type': (ReportExecutions,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/reports/{report_id}/executions',
                'operation_id': 'list_report_executions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'report_id',
                    'cursor',
                    'limit',
                ],
                'required': [
                    'report_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 100,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'report_id':
                        (str,),
                    'cursor':
                        (str,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'report_id': 'report_id',
                    'cursor': 'cursor',
                    'limit': 'limit',
                },
                'location_map': {
                    'report_id': 'path',
                    'cursor': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_reports_endpoint = _Endpoint(
            settings={
                'response_type': (Reports,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/reports',
                'operation_id': 'list_reports',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cursor',
                    'limit',
                    'name',
                    'schedule',
                    'schedule_enabled',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'schedule',
                ],
                'validation': [
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 100,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('schedule',): {

                        "DAILY": "daily",
                        "MONTHLY": "monthly",
                        "ONCE": "once",
                        "WEEKLY": "weekly"
                    },
                },
                'openapi_types': {
                    'cursor':
                        (str,),
                    'limit':
                        (int,),
                    'name':
                        (str,),
                    'schedule':
                        ([str],),
                    'schedule_enabled':
                        (bool,),
                },
                'attribute_map': {
                    'cursor': 'cursor',
                    'limit': 'limit',
                    'name': 'name',
                    'schedule': 'schedule',
                    'schedule_enabled': 'schedule_enabled',
                },
                'location_map': {
                    'cursor': 'query',
                    'limit': 'query',
                    'name': 'query',
                    'schedule': 'query',
                    'schedule_enabled': 'query',
                },
                'collection_format_map': {
                    'schedule': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_report_endpoint = _Endpoint(
            settings={
                'response_type': (Report,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/reports/{report_id}',
                'operation_id': 'update_report',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'report_id',
                    'report_update',
                ],
                'required': [
                    'report_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'report_id':
                        (str,),
                    'report_update':
                        (ReportUpdate,),
                },
                'attribute_map': {
                    'report_id': 'report_id',
                },
                'location_map': {
                    'report_id': 'path',
                    'report_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def add_report(
        self,
        **kwargs
    ):
        """New report  # noqa: E501

        Adds a report.  Documentation about reports models and how to write a valid specification can be found in [Reporting docs](/reporting/introduction).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_report(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            report_create (ReportCreate): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Report
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.add_report_endpoint.call_with_http_info(**kwargs)

    def generate_download_url(
        self,
        report_id,
        report_execution_id,
        **kwargs
    ):
        """Generate the download URL of a report execution result  # noqa: E501

        Generates a temporary signed URL to download the result of a report execution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.generate_download_url(report_id, report_execution_id, async_req=True)
        >>> result = thread.get()

        Args:
            report_id (str): The unique ID for a report.
            report_execution_id (str): The unique ID for a report execution.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ReportExecutionUrl
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['report_id'] = \
            report_id
        kwargs['report_execution_id'] = \
            report_execution_id
        return self.generate_download_url_endpoint.call_with_http_info(**kwargs)

    def get_report(
        self,
        report_id,
        **kwargs
    ):
        """Get report  # noqa: E501

        Retrieves the details of a single report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_report(report_id, async_req=True)
        >>> result = thread.get()

        Args:
            report_id (str): The unique ID for a report.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Report
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['report_id'] = \
            report_id
        return self.get_report_endpoint.call_with_http_info(**kwargs)

    def get_report_execution(
        self,
        report_execution_id,
        **kwargs
    ):
        """Get report execution  # noqa: E501

        Retrieves the details of a single report execution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_report_execution(report_execution_id, async_req=True)
        >>> result = thread.get()

        Args:
            report_execution_id (str): The unique ID for a report execution.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ReportExecution
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['report_execution_id'] = \
            report_execution_id
        return self.get_report_execution_endpoint.call_with_http_info(**kwargs)

    def list_all_report_executions(
        self,
        **kwargs
    ):
        """List all report executions  # noqa: E501

        Returns a list of executions belonging to any report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_all_report_executions(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            cursor (str): A cursor that identifies the page of results to return. This is used to paginate the results of this API.  For the first page of results, this parameter can be left out. For additional pages, use the value returned by the API in the `next_cursor` field. Similarly the `previous_cursor` can be used to reverse backwards in the list.. [optional]
            limit (int): Defines the maximum number of items to return for this request.. [optional] if omitted the server will use the default value of 20
            created_at_gte (datetime): Filters the results to report executions created after this ISO date-time string. The time zone must be included.  Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.. [optional]
            created_at_lte (datetime): Filters the results to report executions created before this ISO date-time string. The time zone must be included.  Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.. [optional]
            report_name (str): Filters for executions of reports that have a matching `name` value. This filter is case-insensitive.  Ensure that when necessary, the value you pass for this filter is URL encoded.. [optional]
            status ([str]): Filters for report executions that have a matching `status` value.  This filter accepts multiple values.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ReportExecutions
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.list_all_report_executions_endpoint.call_with_http_info(**kwargs)

    def list_report_executions(
        self,
        report_id,
        **kwargs
    ):
        """List executions for a report  # noqa: E501

        Returns a list of executions for a report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_report_executions(report_id, async_req=True)
        >>> result = thread.get()

        Args:
            report_id (str): The unique ID for a report.

        Keyword Args:
            cursor (str): A cursor that identifies the page of results to return. This is used to paginate the results of this API.  For the first page of results, this parameter can be left out. For additional pages, use the value returned by the API in the `next_cursor` field. Similarly the `previous_cursor` can be used to reverse backwards in the list.. [optional]
            limit (int): Defines the maximum number of items to return for this request.. [optional] if omitted the server will use the default value of 20
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ReportExecutions
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['report_id'] = \
            report_id
        return self.list_report_executions_endpoint.call_with_http_info(**kwargs)

    def list_reports(
        self,
        **kwargs
    ):
        """List reports  # noqa: E501

        Returns a list of reports.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_reports(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            cursor (str): A cursor that identifies the page of results to return. This is used to paginate the results of this API.  For the first page of results, this parameter can be left out. For additional pages, use the value returned by the API in the `next_cursor` field. Similarly the `previous_cursor` can be used to reverse backwards in the list.. [optional]
            limit (int): Defines the maximum number of items to return for this request.. [optional] if omitted the server will use the default value of 20
            name (str): Filters for reports that have a matching `name` value. This filter is case-insensitive.  Ensure that when necessary, the value you pass for this filter is URL encoded.. [optional]
            schedule ([str]): Filters for reports that have matching `schedule` values.. [optional]
            schedule_enabled (bool): Filters for reports that have a matching `schedule_enabled` value.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Reports
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.list_reports_endpoint.call_with_http_info(**kwargs)

    def update_report(
        self,
        report_id,
        **kwargs
    ):
        """Update report  # noqa: E501

        Updates a report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_report(report_id, async_req=True)
        >>> result = thread.get()

        Args:
            report_id (str): The unique ID for a report.

        Keyword Args:
            report_update (ReportUpdate): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Report
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['report_id'] = \
            report_id
        return self.update_report_endpoint.call_with_http_info(**kwargs)

