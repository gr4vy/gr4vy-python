"""
    Gr4vy API

    Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.  # noqa: E501

    The version of the OpenAPI document: 1.1.0-beta
    Contact: code@gr4vy.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from gr4vy.gr4vy_api.openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from gr4vy.gr4vy_api.openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from gr4vy.gr4vy_api.openapi_client.model.actions import Actions
from gr4vy.gr4vy_api.openapi_client.model.error401_unauthorized import Error401Unauthorized
from gr4vy.gr4vy_api.openapi_client.model.error404_not_found import Error404NotFound
from gr4vy.gr4vy_api.openapi_client.model.error_generic import ErrorGeneric
from gr4vy.gr4vy_api.openapi_client.model.refund import Refund
from gr4vy.gr4vy_api.openapi_client.model.refunds import Refunds
from gr4vy.gr4vy_api.openapi_client.model.transaction import Transaction
from gr4vy.gr4vy_api.openapi_client.model.transaction_capture_request import TransactionCaptureRequest
from gr4vy.gr4vy_api.openapi_client.model.transaction_refund_request import TransactionRefundRequest
from gr4vy.gr4vy_api.openapi_client.model.transaction_request import TransactionRequest
from gr4vy.gr4vy_api.openapi_client.model.transactions import Transactions


class TransactionsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.authorize_new_transaction_endpoint = _Endpoint(
            settings={
                'response_type': (Transaction,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/transactions',
                'operation_id': 'authorize_new_transaction',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transaction_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transaction_request':
                        (TransactionRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transaction_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.capture_transaction_endpoint = _Endpoint(
            settings={
                'response_type': (Transaction,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/transactions/{transaction_id}/capture',
                'operation_id': 'capture_transaction',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transaction_id',
                    'transaction_capture_request',
                ],
                'required': [
                    'transaction_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transaction_id':
                        (str,),
                    'transaction_capture_request':
                        (TransactionCaptureRequest,),
                },
                'attribute_map': {
                    'transaction_id': 'transaction_id',
                },
                'location_map': {
                    'transaction_id': 'path',
                    'transaction_capture_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_transaction_endpoint = _Endpoint(
            settings={
                'response_type': (Transaction,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/transactions/{transaction_id}',
                'operation_id': 'get_transaction',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'transaction_id',
                ],
                'required': [
                    'transaction_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transaction_id':
                        (str,),
                },
                'attribute_map': {
                    'transaction_id': 'transaction_id',
                },
                'location_map': {
                    'transaction_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_transaction_actions_endpoint = _Endpoint(
            settings={
                'response_type': (Actions,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/transactions/{transaction_id}/actions',
                'operation_id': 'get_transaction_actions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'transaction_id',
                ],
                'required': [
                    'transaction_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transaction_id':
                        (str,),
                },
                'attribute_map': {
                    'transaction_id': 'transaction_id',
                },
                'location_map': {
                    'transaction_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_transaction_refund_endpoint = _Endpoint(
            settings={
                'response_type': (Refund,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/transactions/{transaction_id}/refunds/{refund_id}',
                'operation_id': 'get_transaction_refund',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'transaction_id',
                    'refund_id',
                ],
                'required': [
                    'transaction_id',
                    'refund_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transaction_id':
                        (str,),
                    'refund_id':
                        (str,),
                },
                'attribute_map': {
                    'transaction_id': 'transaction_id',
                    'refund_id': 'refund_id',
                },
                'location_map': {
                    'transaction_id': 'path',
                    'refund_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_transaction_refunds_endpoint = _Endpoint(
            settings={
                'response_type': (Refunds,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/transactions/{transaction_id}/refunds',
                'operation_id': 'list_transaction_refunds',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'transaction_id',
                    'limit',
                    'cursor',
                ],
                'required': [
                    'transaction_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 100,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transaction_id':
                        (str,),
                    'limit':
                        (int,),
                    'cursor':
                        (str,),
                },
                'attribute_map': {
                    'transaction_id': 'transaction_id',
                    'limit': 'limit',
                    'cursor': 'cursor',
                },
                'location_map': {
                    'transaction_id': 'path',
                    'limit': 'query',
                    'cursor': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_transactions_endpoint = _Endpoint(
            settings={
                'response_type': (Transactions,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/transactions',
                'operation_id': 'list_transactions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'buyer_external_identifier',
                    'buyer_id',
                    'cursor',
                    'limit',
                    'amount_eq',
                    'amount_gte',
                    'amount_lte',
                    'created_at_gte',
                    'created_at_lte',
                    'currency',
                    'external_identifier',
                    'has_refunds',
                    'id',
                    'metadata',
                    'method',
                    'payment_service_id',
                    'payment_service_transaction_id',
                    'search',
                    'status',
                    'updated_at_gte',
                    'updated_at_lte',
                    'before_created_at',
                    'after_created_at',
                    'before_updated_at',
                    'after_updated_at',
                    'transaction_status',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'method',
                    'status',
                    'transaction_status',
                ],
                'validation': [
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 500,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('method',): {

                        "AFTERPAY": "afterpay",
                        "APPLEPAY": "applepay",
                        "BANKED": "banked",
                        "BITPAY": "bitpay",
                        "BOLETO": "boleto",
                        "CARD": "card",
                        "CLEARPAY": "clearpay",
                        "DANA": "dana",
                        "FORTUMO": "fortumo",
                        "GCASH": "gcash",
                        "GOCARDLESS": "gocardless",
                        "GOOGLEPAY": "googlepay",
                        "GRABPAY": "grabpay",
                        "KLARNA": "klarna",
                        "OVO": "ovo",
                        "PAYMAYA": "paymaya",
                        "PAYPAL": "paypal",
                        "PIX": "pix",
                        "RABBITLINEPAY": "rabbitlinepay",
                        "SHOPEEPAY": "shopeepay",
                        "STRIPEDD": "stripedd",
                        "TRUEMONEY": "truemoney",
                        "TRUSTLY": "trustly",
                        "ZIPPAY": "zippay",
                        "BOOST": "boost",
                    },
                    ('status',): {

                        "PROCESSING": "processing",
                        "BUYER_APPROVAL_PENDING": "buyer_approval_pending",
                        "AUTHORIZATION_SUCCEEDED": "authorization_succeeded",
                        "AUTHORIZATION_FAILED": "authorization_failed",
                        "AUTHORIZATION_DECLINED": "authorization_declined",
                        "CAPTURE_PENDING": "capture_pending",
                        "CAPTURE_SUCCEEDED": "capture_succeeded",
                        "AUTHORIZATION_VOID_PENDING": "authorization_void_pending",
                        "AUTHORIZATION_VOIDED": "authorization_voided"
                    },
                    ('transaction_status',): {

                        "PROCESSING": "processing",
                        "BUYER_APPROVAL_PENDING": "buyer_approval_pending",
                        "AUTHORIZATION_SUCCEEDED": "authorization_succeeded",
                        "AUTHORIZATION_FAILED": "authorization_failed",
                        "AUTHORIZATION_DECLINED": "authorization_declined",
                        "CAPTURE_PENDING": "capture_pending",
                        "CAPTURE_SUCCEEDED": "capture_succeeded",
                        "AUTHORIZATION_VOID_PENDING": "authorization_void_pending",
                        "AUTHORIZATION_VOIDED": "authorization_voided"
                    },
                },
                'openapi_types': {
                    'buyer_external_identifier':
                        (str,),
                    'buyer_id':
                        (str,),
                    'cursor':
                        (str,),
                    'limit':
                        (int,),
                    'amount_eq':
                        (int,),
                    'amount_gte':
                        (int,),
                    'amount_lte':
                        (int,),
                    'created_at_gte':
                        (datetime,),
                    'created_at_lte':
                        (datetime,),
                    'currency':
                        ([str],),
                    'external_identifier':
                        (str,),
                    'has_refunds':
                        (bool,),
                    'id':
                        (str,),
                    'metadata':
                        ([str],),
                    'method':
                        ([str],),
                    'payment_service_id':
                        ([str],),
                    'payment_service_transaction_id':
                        (str,),
                    'search':
                        (str,),
                    'status':
                        ([str],),
                    'updated_at_gte':
                        (datetime,),
                    'updated_at_lte':
                        (datetime,),
                    'before_created_at':
                        (datetime,),
                    'after_created_at':
                        (datetime,),
                    'before_updated_at':
                        (datetime,),
                    'after_updated_at':
                        (datetime,),
                    'transaction_status':
                        (str,),
                },
                'attribute_map': {
                    'buyer_external_identifier': 'buyer_external_identifier',
                    'buyer_id': 'buyer_id',
                    'cursor': 'cursor',
                    'limit': 'limit',
                    'amount_eq': 'amount_eq',
                    'amount_gte': 'amount_gte',
                    'amount_lte': 'amount_lte',
                    'created_at_gte': 'created_at_gte',
                    'created_at_lte': 'created_at_lte',
                    'currency': 'currency',
                    'external_identifier': 'external_identifier',
                    'has_refunds': 'has_refunds',
                    'id': 'id',
                    'metadata': 'metadata',
                    'method': 'method',
                    'payment_service_id': 'payment_service_id',
                    'payment_service_transaction_id': 'payment_service_transaction_id',
                    'search': 'search',
                    'status': 'status',
                    'updated_at_gte': 'updated_at_gte',
                    'updated_at_lte': 'updated_at_lte',
                    'before_created_at': 'before_created_at',
                    'after_created_at': 'after_created_at',
                    'before_updated_at': 'before_updated_at',
                    'after_updated_at': 'after_updated_at',
                    'transaction_status': 'transaction_status',
                },
                'location_map': {
                    'buyer_external_identifier': 'query',
                    'buyer_id': 'query',
                    'cursor': 'query',
                    'limit': 'query',
                    'amount_eq': 'query',
                    'amount_gte': 'query',
                    'amount_lte': 'query',
                    'created_at_gte': 'query',
                    'created_at_lte': 'query',
                    'currency': 'query',
                    'external_identifier': 'query',
                    'has_refunds': 'query',
                    'id': 'query',
                    'metadata': 'query',
                    'method': 'query',
                    'payment_service_id': 'query',
                    'payment_service_transaction_id': 'query',
                    'search': 'query',
                    'status': 'query',
                    'updated_at_gte': 'query',
                    'updated_at_lte': 'query',
                    'before_created_at': 'query',
                    'after_created_at': 'query',
                    'before_updated_at': 'query',
                    'after_updated_at': 'query',
                    'transaction_status': 'query',
                },
                'collection_format_map': {
                    'currency': 'multi',
                    'metadata': 'multi',
                    'method': 'multi',
                    'payment_service_id': 'multi',
                    'status': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.refund_transaction_endpoint = _Endpoint(
            settings={
                'response_type': (Refund,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/transactions/{transaction_id}/refunds',
                'operation_id': 'refund_transaction',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transaction_id',
                    'transaction_refund_request',
                ],
                'required': [
                    'transaction_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transaction_id':
                        (str,),
                    'transaction_refund_request':
                        (TransactionRefundRequest,),
                },
                'attribute_map': {
                    'transaction_id': 'transaction_id',
                },
                'location_map': {
                    'transaction_id': 'path',
                    'transaction_refund_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.void_transaction_endpoint = _Endpoint(
            settings={
                'response_type': (Transaction,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/transactions/{transaction_id}/void',
                'operation_id': 'void_transaction',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transaction_id',
                ],
                'required': [
                    'transaction_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transaction_id':
                        (str,),
                },
                'attribute_map': {
                    'transaction_id': 'transaction_id',
                },
                'location_map': {
                    'transaction_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def authorize_new_transaction(
        self,
        **kwargs
    ):
        """New transaction  # noqa: E501

        Attempts to create an authorization for a payment method. In some cases it is not possible to create the authorization without redirecting the user for their authorization. In these cases the status is set to `buyer_approval_pending` and an `approval_url` is returned.  Additionally, this endpoint accepts a few additional fields that allow for simultaneous capturing and storage of the payment method.  * `store` - Use this field to store the payment method for future use. Not all payment methods support this feature. * `capture` - Use this method to also perform a capture of the transaction after it has been authorized.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.authorize_new_transaction(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            transaction_request (TransactionRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Transaction
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.authorize_new_transaction_endpoint.call_with_http_info(**kwargs)

    def capture_transaction(
        self,
        transaction_id,
        **kwargs
    ):
        """Capture transaction  # noqa: E501

        Captures a previously authorized transaction.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.capture_transaction(transaction_id, async_req=True)
        >>> result = thread.get()

        Args:
            transaction_id (str): The ID for the transaction to get the information for.

        Keyword Args:
            transaction_capture_request (TransactionCaptureRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Transaction
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['transaction_id'] = \
            transaction_id
        return self.capture_transaction_endpoint.call_with_http_info(**kwargs)

    def get_transaction(
        self,
        transaction_id,
        **kwargs
    ):
        """Get transaction  # noqa: E501

        Get information about a transaction.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_transaction(transaction_id, async_req=True)
        >>> result = thread.get()

        Args:
            transaction_id (str): The ID for the transaction to get the information for.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Transaction
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['transaction_id'] = \
            transaction_id
        return self.get_transaction_endpoint.call_with_http_info(**kwargs)

    def get_transaction_actions(
        self,
        transaction_id,
        **kwargs
    ):
        """Get transaction actions  # noqa: E501

        Gets actions for a given transaction.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_transaction_actions(transaction_id, async_req=True)
        >>> result = thread.get()

        Args:
            transaction_id (str): The ID for the transaction to get the information for.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Actions
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['transaction_id'] = \
            transaction_id
        return self.get_transaction_actions_endpoint.call_with_http_info(**kwargs)

    def get_transaction_refund(
        self,
        transaction_id,
        refund_id,
        **kwargs
    ):
        """Get transaction refund  # noqa: E501

        Gets information about a refund associated with a certain transaction.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_transaction_refund(transaction_id, refund_id, async_req=True)
        >>> result = thread.get()

        Args:
            transaction_id (str): The ID for the transaction to get the information for.
            refund_id (str): The unique ID of the refund.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Refund
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['transaction_id'] = \
            transaction_id
        kwargs['refund_id'] = \
            refund_id
        return self.get_transaction_refund_endpoint.call_with_http_info(**kwargs)

    def list_transaction_refunds(
        self,
        transaction_id,
        **kwargs
    ):
        """List transaction refunds  # noqa: E501

        Lists all refunds associated with a certain transaction.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_transaction_refunds(transaction_id, async_req=True)
        >>> result = thread.get()

        Args:
            transaction_id (str): The ID for the transaction to get the information for.

        Keyword Args:
            limit (int): Defines the maximum number of items to return for this request.. [optional] if omitted the server will use the default value of 20
            cursor (str): A cursor that identifies the page of results to return. This is used to paginate the results of this API.  For the first page of results, this parameter can be left out. For additional pages, use the value returned by the API in the `next_cursor` field. Similarly the `previous_cursor` can be used to reverse backwards in the list.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Refunds
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['transaction_id'] = \
            transaction_id
        return self.list_transaction_refunds_endpoint.call_with_http_info(**kwargs)

    def list_transactions(
        self,
        **kwargs
    ):
        """List transactions  # noqa: E501

        Lists all transactions for an account. Sorted by last `updated_at` status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_transactions(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            buyer_external_identifier (str): Filters the results to only the items for which the `buyer` has an `external_identifier` that matches this value.. [optional]
            buyer_id (str): Filters the results to only the items for which the `buyer` has an `id` that matches this value.. [optional]
            cursor (str): A cursor that identifies the page of results to return. This is used to paginate the results of this API.  For the first page of results, this parameter can be left out. For additional pages, use the value returned by the API in the `next_cursor` field. Similarly the `previous_cursor` can be used to reverse backwards in the list.. [optional]
            limit (int): Defines the maximum number of items to return for this request.. [optional] if omitted the server will use the default value of 20
            amount_eq (int): Filters for transactions that have an `amount` that is equal to the provided `amount_eq` value.. [optional]
            amount_gte (int): Filters for transactions that have an `amount` that is greater than or equal to the `amount_gte` value.. [optional]
            amount_lte (int): Filters for transactions that have an `amount` that is less than or equal to the `amount_lte` value.. [optional]
            created_at_gte (datetime): Filters the results to only transactions created after this ISO date-time string. The time zone must be included.  Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.. [optional]
            created_at_lte (datetime): Filters the results to only transactions created before this ISO date-time string. The time zone must be included.  Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.. [optional]
            currency ([str]): Filters for transactions that have matching `currency` values. The `currency` values provided must be formatted as 3-letter ISO currency code.. [optional]
            external_identifier (str): Filters the results to only the items for which the `external_identifier` matches this value.. [optional]
            has_refunds (bool): When set to `true`, filter for transactions that have at least one refund in any state associated with it. When set to `false`, filter for transactions that have no refunds.. [optional]
            id (str): Filters for the transaction that has a matching `id` value.. [optional]
            metadata ([str]): Filters for transactions where their `metadata` values contain all of the provided `metadata` keys. When querying for more than one key-value pair, each pair must be separated by a `|` character.  Duplicate keys are not supported. If a key is duplicated, only the last appearing value will be used.. [optional]
            method ([str]): Filters the results to only the items for which the `method` has been set to this value.. [optional]
            payment_service_id ([str]): Filters for transactions that were processed by the provided `payment_service_id` values.. [optional]
            payment_service_transaction_id (str): Filters for transactions that have a matching `payment_service_transaction_id` value. The `payment_service_transaction_id` is the identifier of the transaction given by the payment service.. [optional]
            search (str): Filters for transactions that have one of the following fields match exactly with the provided `search` value: * `buyer_external_identifier` * `buyer_id` * `external_identifier` * `id` * `payment_service_transaction_id`. [optional]
            status ([str]): Filters the results to only the transactions that have a `status` that matches with any of the provided status values.. [optional]
            updated_at_gte (datetime): Filters the results to only transactions last updated after this ISO date-time string. The time zone must be included.  Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.. [optional]
            updated_at_lte (datetime): Filters the results to only transactions last updated before this ISO date-time string. The time zone must be included.  Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.. [optional]
            before_created_at (datetime): Filters the results to only transactions created before this ISO date-time string. The time zone must be included.  Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.  **WARNING** This filter is deprecated and may be removed eventually, use `created_at_lte` instead.. [optional]
            after_created_at (datetime): Filters the results to only transactions created after this ISO date-time string. The time zone must be included.  Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.  **WARNING** This filter is deprecated and may be removed eventually, use `created_at_gte` instead.. [optional]
            before_updated_at (datetime): Filters the results to only transactions last updated before this ISO date-time string. The time zone must be included.  Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.  **WARNING** This filter is deprecated and may be removed eventually, use `updated_at_lte` instead.. [optional]
            after_updated_at (datetime): Filters the results to only transactions last updated after this ISO date-time string. The time zone must be included.  Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.  **WARNING** This filter is deprecated and may be removed eventually, use `updated_at_gte` instead.. [optional]
            transaction_status (str): Filters the results to only the transactions for which the `status` matches this value.  **WARNING** This filter is deprecated and may be removed eventually, use `status` instead.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Transactions
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.list_transactions_endpoint.call_with_http_info(**kwargs)

    def refund_transaction(
        self,
        transaction_id,
        **kwargs
    ):
        """Refund transaction  # noqa: E501

        Refunds a transaction, fully or partially.  If the transaction was not yet successfully captured, the refund will not be processed. Authorized transactions can be [voided](#operation/void-transaction) instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.refund_transaction(transaction_id, async_req=True)
        >>> result = thread.get()

        Args:
            transaction_id (str): The ID for the transaction to get the information for.

        Keyword Args:
            transaction_refund_request (TransactionRefundRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Refund
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['transaction_id'] = \
            transaction_id
        return self.refund_transaction_endpoint.call_with_http_info(**kwargs)

    def void_transaction(
        self,
        transaction_id,
        **kwargs
    ):
        """Void transaction  # noqa: E501

        Voids a transaction.  If the transaction was not yet successfully authorized, or was already captured, the void will not be processed. Captured transactions can be [refunded](#operation/refund-transaction) instead.  Voiding zero-amount authorized transactions is not supported.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.void_transaction(transaction_id, async_req=True)
        >>> result = thread.get()

        Args:
            transaction_id (str): The ID for the transaction to get the information for.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Transaction
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['transaction_id'] = \
            transaction_id
        return self.void_transaction_endpoint.call_with_http_info(**kwargs)

